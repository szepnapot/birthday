{"version":3,"sources":["App.js","background.js","serviceWorker.js","index.js"],"names":["App","Countdown","state","days","undefined","hours","minutes","seconds","this","interval","setInterval","props","timeTillDate","timeFormat","then","moment","now","countdown","format","setState","clearInterval","daysRadius","mapNumber","hoursRadius","minutesRadius","secondsRadius","className","SVGCircle","radius","React","Component","fill","stroke","strokeWidth","d","describeArc","polarToCartesian","centerX","centerY","angleInDegrees","angleInRadians","Math","PI","x","cos","y","sin","startAngle","endAngle","start","end","largeArcFlag","join","number","in_min","in_max","out_min","out_max","IMAGES","id","src","title","description","Background","useWindowSize","width","height","image","day","style","backgroundImage","path","process","opacity","backgroundAttachment","backgroundRepeat","backgroundPosition","backgroundSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ebbbcb89.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport moment from \"moment\";\nimport * as path from 'path';\n\n\n\nfunction App() {\n    class Countdown extends React.Component {\n        state = {\n            days: undefined,\n            hours: undefined,\n            minutes: undefined,\n            seconds: undefined,\n        };\n\n        componentDidMount() {\n            this.interval = setInterval(() => {\n                const { timeTillDate, timeFormat } = this.props;\n                const then = moment(timeTillDate, timeFormat);\n                const now = moment();\n                const countdown = moment(then - now);\n                const days = countdown.format('D');\n                const hours = countdown.format('HH');\n                const minutes = countdown.format('mm');\n                const seconds = countdown.format('ss');\n\n                this.setState({ days, hours, minutes, seconds });\n            }, 1000);\n        }\n\n        componentWillUnmount() {\n            if(this.interval) {\n                clearInterval(this.interval);\n            }\n        }\n\n        render() {\n            const { days, hours, minutes, seconds } = this.state;\n            const daysRadius = mapNumber(days, 30, 0, 0, 360);\n            const hoursRadius = mapNumber(hours, 24, 0, 0, 360);\n            const minutesRadius = mapNumber(minutes, 60, 0, 0, 360);\n            const secondsRadius = mapNumber(seconds, 60, 0, 0, 360);\n\n            if(!seconds) {\n                return null;\n            }\n\n            return (\n                <div className=\"main\">\n                    <div className=\"container\">\n                        <h1>Countdown 'till my birthday</h1>\n                        <div className='countdown-wrapper'>\n                            {days && (\n                                <div className='countdown-item'>\n                                    <SVGCircle radius={daysRadius} />\n                                    {days}\n                                    <span>days</span>\n                                </div>\n                            )}\n                            {hours && (\n                                <div className='countdown-item'>\n                                    <SVGCircle radius={hoursRadius} />\n                                    {hours}\n                                    <span>hours</span>\n                                </div>\n                            )}\n                            {minutes && (\n                                <div className='countdown-item'>\n                                    <SVGCircle radius={minutesRadius} />\n                                    {minutes}\n                                    <span>minutes</span>\n                                </div>\n                            )}\n                            {seconds && (\n                                <div className='countdown-item'>\n                                    <SVGCircle radius={secondsRadius} />\n                                    {seconds}\n                                    <span>seconds</span>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n\n    const SVGCircle = ({ radius }) => (\n        <svg className='countdown-svg'>\n            <path fill=\"none\" stroke=\"#333\" strokeWidth=\"4\" d={describeArc(50, 50, 48, 0, radius)}/>\n        </svg>\n    );\n\n\n   return (\n            <Countdown\n                timeTillDate=\"02 06 2020, 8:00 pm\"\n                timeFormat=\"MM DD YYYY, h:mm a\"\n            />);\n\n// From stackoverflow: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n    function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n        var angleInRadians = (angleInDegrees-90) * Math.PI / 180.0;\n\n        return {\n            x: centerX + (radius * Math.cos(angleInRadians)),\n            y: centerY + (radius * Math.sin(angleInRadians))\n        };\n    }\n\n    function describeArc(x, y, radius, startAngle, endAngle){\n\n        var start = polarToCartesian(x, y, radius, endAngle);\n        var end = polarToCartesian(x, y, radius, startAngle);\n\n        var largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n\n        var d = [\n            \"M\", start.x, start.y,\n            \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y\n        ].join(\" \");\n\n        return d;\n    }\n\n// Stackoverflow: https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\n    function mapNumber(number, in_min, in_max, out_min, out_max) {\n        return (number - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n    }\n}\n\nexport default App;\n","import {useWindowSize} from \"react-use\";\nimport Confetti from \"react-confetti\";\nimport React from \"react\";\nimport * as path from \"path\";\nimport moment from \"moment\";\n\nfunction getNumberOfDay() {\n    const date = moment();\n    return date.day();\n}\n\nconst IMAGES = [\n    { id: 1, src: '1.jpg', title: 'bday image 1', description: 'posh life'},\n    { id: 2, src: '2.jpg', title: 'bday image 2', description: 'champagne'},\n    { id: 3, src: '3.jpg', title: 'bday image 3', description: 'confetti'},\n    { id: 4, src: '4.jpg', title: 'bday image 4', description: 'happybday'},\n];\n\n\n\nfunction Background() {\n    const { width, height } = useWindowSize();\n    const image = IMAGES[getNumberOfDay() - 1];\n\n    class Background extends React.Component {\n        render() {\n            return (\n                    <Confetti\n                        style={{\n                            backgroundImage:`url(${path.join(process.env.PUBLIC_URL, image.src)})`,\n                            opacity: 0.5,\n                            backgroundAttachment: 'scroll',\n                            backgroundRepeat: 'no-repeat',\n                            backgroundPosition: '0% 0%',\n                            backgroundSize: '100% 100%',\n                            height: '100vh',\n                        }}\n                        width={width}\n                        height={height}\n                    />\n            )\n        }\n    }\n    return (\n            <Background/>\n        );\n}\n\nexport default Background;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Background from \"./background\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        <App />\n        <Background />\n    </div>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}